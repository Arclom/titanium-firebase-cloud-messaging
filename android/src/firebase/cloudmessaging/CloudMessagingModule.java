/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package firebase.cloudmessaging;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.messaging.FirebaseMessaging;
import com.google.firebase.messaging.RemoteMessage;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.common.Log;
import java.util.HashMap;
import org.appcelerator.kroll.KrollFunction;

@Kroll.module(name="CloudMessaging", id="firebase.cloudmessaging")
public class CloudMessagingModule extends KrollModule
{

	private static final String LCAT = "FirebaseCloudMessaging";
	private KrollFunction onToken = null;
	private KrollFunction onMessage = null;
	private static CloudMessagingModule instance = null;

	public CloudMessagingModule()
	{
		super();
		instance = this;
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void registerForPushNotifications(KrollDict opt)
	{
		if (opt.containsKey("onMessage")) {
			onMessage = (KrollFunction) opt.get("onMessage");
			Log.d(LCAT,""+onMessage);
		}
		if (opt.containsKey("onToken")) {
			onToken = (KrollFunction) opt.get("onToken");
		}

		FirebaseInstanceId.getInstance().getToken();
	}

	@Kroll.method
	public void subcribeToTopic(String topic)
	{
		FirebaseMessaging.getInstance().subscribeToTopic(topic);
		Log.i(LCAT, "subscribe to " + topic);
	}

	@Kroll.method
	public void unsubcribeFromTopic(String topic)
	{
		FirebaseMessaging.getInstance().unsubscribeFromTopic(topic);
		Log.i(LCAT, "unsubscribe from " + topic);
	}

	@Kroll.method
	public void sendMessage(KrollDict obj)
	{
		FirebaseMessaging fm = FirebaseMessaging.getInstance();

		String fireTo = obj.getString("to");
		String fireMessageId = obj.getString("messageId");
		String fireMessage = obj.getString("message");
		int ttl = TiConvert.toInt(obj.get("ttl"), 84600);

		if (fireTo != "" && fireMessageId != ""){
			fm.send(new RemoteMessage.Builder(fireTo)
				.setMessageId(fireMessageId)
				.addData("message", fireMessage)
				.setTtl(ttl)
				.build());
		} else {
			Log.e(LCAT, "Please set 'to' and 'messageId'");
		}
	}

	public void onTokenRefresh(String token){
		if (onToken != null) {
			HashMap<String, Object> event = new HashMap<String, Object>();
			event.put("fcmToken", token);
			onMessage.call(getKrollObject(), event);
		}
	}

	public void onMessageReceived(HashMap message){
		if (onMessage != null) {
			HashMap<String, HashMap> event = new HashMap<String, HashMap>();
			event.put("message", message);
			onMessage.call(getKrollObject(), event);
		}
	}

	@Kroll.getProperty
	public String fcmToken()
	{
		return FirebaseInstanceId.getInstance().getToken();
	}

	public static CloudMessagingModule getInstance() {
		return instance;
	}
}
